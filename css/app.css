/*******************************************************************************
 * style.scss
 *
 * This file shouldn't directly contain any SCSS code, instead it only serves to
 * combine the SCSS contained in other Sass partials through @import directives.
 *
 * BASE............Styling for common HTML and Drupal elements.
 * LAYOUT..........Styles for the page structure that contain components.
 * COMPONENTS......Components, their modifiers and sub-components.
 ******************************************************************************/
/*******************************************************************************
 * _utils.scss
 *
 * Sass offers come very useful features, these include variables functions and
 * mixins. Extensions such as Compass and Susy can also be used to provide extra
 * functions and mixins to be used throughout the theme. This file acts as a
 * single place for defining these things, which can then be accessed by
 * importing _utils.scss where required. The following should be defined in this
 * file:
 * - Custom Sass mixins for the theme.
 * - Custom Sass functions for the theme.
 * - Overriding the default variables provided by extensions such as Compass.
 * - Defining new variables for:
 *      - Colors.
 *      - Font sizes and families.
 *      - Layout and grid sizing.
 ******************************************************************************/
@font-face {
  font-family: 'Sorts Mill Goudy';
  src: url("../fonts/goudystm/GoudyStM-webfont.eot");
  src: url("../fonts/goudystm/GoudyStM-webfont.eot?iefix") format("eot"), url("../fonts/goudystm/GoudyStM-webfont.woff") format("woff"), url("../fonts/goudystm/GoudyStM-webfont.ttf") format("truetype");
  font-weight: 500;
  font-style: normal; }

@font-face {
  font-family: 'Sorts Mill Goudy';
  src: url("../fonts/goudystm/GoudyStM-italic-webfont.eot");
  src: url("../fonts/goudystm/GoudyStM-italic-webfont.eot?iefix") format("eot"), url("../fonts/goudystm/GoudyStM-italic-webfont.woff") format("woff"), url("../fonts/goudystm/GoudyStM-italic-webfont.ttf") format("truetype");
  font-weight: 500;
  font-style: italic; }

@font-face {
  font-family: 'Nobile';
  src: url("../fonts/nobile/nobile.eot");
  src: url("../fonts/nobile/nobile.eot?iefix") format("eot"), url("../fonts/nobile/nobile.woff") format("woff"), url("../fonts/nobile/nobile.ttf") format("truetype");
  font-weight: 400;
  font-style: normal; }

@font-face {
  font-family: 'Nobile';
  src: url("../fonts/nobile/nobile_bold.eot");
  src: url("../fonts/nobile/nobile_bold.eot?iefix") format("eot"), url("../fonts/nobile/nobile_bold.woff") format("woff"), url("../fonts/nobile/nobile_bold.ttf") format("truetype");
  font-weight: 700; }

body {
  font-size: 16px;
  line-height: 1.5;
  font-family: "Sorts Mill Goudy", "Adobe Garamond", "Garamond", Palatino, serif;
  font-weight: 400; }

.l-header,
.l-header a,
h1, h2, h3, h4, h5 {
  font-family: "Nobile", Helvetica, sans-serif;
  font-weight: 400; }

/*******************************************************************************
 * _base.scss

 * Base styles define the default look for HTML and common Drupal elements.
 *
 * These rules will generally be made up of element selectors for HTML elements
 * such as headings, paragraphs and lists. Common Drupal elements such as form
 * items, collapsible fieldsets and messages should be included in this partial.
 *
 * The styleguide module (http://drupal.org/project/styleguide) gives you a good
 * overview of Drupals common elements for styling. By setting a solid baseline
 * before adding any more specific customisations you ensure that as any new
 * features are added they will be correctly styled without any extra work.
 ******************************************************************************/
body {
  background: #f1ecd1;
  font-family: nobile;
  color: #333333; }

a:link,
a:visited {
  color: #0088cc;
  text-decoration: none; }

a:active,
a:hover {
  text-decoration: underline; }

a.active-trail {
  color: black;
  text-decoration: none; }

html.js .form-autocomplete {
  background-position: 100% 7px; }

.view-id-orgs .views-exposed-form .views-exposed-widget .form-submit {
  margin-top: 0; }

input[type="submit"],
select {
  background: #f7f4e5;
  border: 1px solid #e5dcaa;
  padding: 2px 5px; }

/*******************************************************************************
 * _layout.scss
 *
 * The layout of the major regions (usually, but not necessarily Drupal regions)
 * that components will be placed within. Layout styles for the theme's
 * components should not be placed here and should instead be kept with the
 * relevant SCSS for that component.
 ******************************************************************************/
/*******************************************************************************
 * _components.scss
 *
 * Imports more partials that contain full components (modules in SMACSS), their
 * sub-components and modifiers.
 *
 * Components are discrete parts of your page that should sit within the regions
 * of your layouts. You should try to abstract your components as much as
 * possible to promote reuse throughout the theme. Components should be flexible
 * enough to respond to any width and should never rely on context
 * (e.g. .sidebar-first .component) for styling. This allows modules to be
 * placed throughout the theme with no risk of them breaking.
 *
 * If you find you need to change the look of a component depending on it's
 * context you should avoid using context based classes at all costs. Instead it
 * is better to add another "modifier" class to the component to alter the
 * styling. Again, this promotes reuse.
 *
 * Sub-components are the individual parts that make up a component. As a
 * general rule, adding a class to target a sub-component is a much better
 * option than using descendant selectors or element selectors. In many cases
 * sub-components can be made more reusable by making them components in their
 * own right, so they can then be used within other components.
 *
 * Almost everything that doesn't belong in base should be made a component.
 * Here's some common examples throughout Drupal:
 *
 * - Blocks
 * - Content Types - For example, you may have a generic node component that
 *      contains sub-components for the submitted by line and links. Specific
 *      components can then be created for each content type to style the
 *      specifics of each. Finally, by using entity view modes you can easily
 *      apply modifications based on the .node-[view-mode] classes.
 * - Forms - For instance the log in form.
 * - Views - Each views output style could be made into a component, the content
 *       of each row should be provided my a view mode styled by it's component
 *       CSS. Exposed filter forms, views pagers and other views elements are
 *       also good candidates for components.
 ******************************************************************************/
/* Header ------------------------------------------------------------------- */
.page-head {
  background: #04952e;
  color: #fff;
  padding: 10px 0; }

.contrast {
  background: #0088cc;
  color: #fff;
  padding: 10px 0; }

.l-branding,
.l-region--navigation {
  font-size: 12px;
  line-height: 14px; }
  .l-branding a:link, .l-branding a:active,
  .l-branding a:visited, .l-branding a:hover,
  .l-region--navigation a:link,
  .l-region--navigation a:active,
  .l-region--navigation a:visited,
  .l-region--navigation a:hover {
    color: white; }

.site-branding {
  font-weight: bold; }

/* Orgs --------------------------------------------------------------------- */
.homepage-org {
  padding: 1.5em 0;
  border-bottom: 1px solid #e5dcaa; }
  .homepage-org .timeframe {
    color: #333333;
    font-size: 16px; }
  .homepage-org a,
  .homepage-org .received,
  .homepage-org .granted {
    background: #f7f4e5;
    border: 1px solid #e5dcaa;
    padding: 2px 5px; }

/* Orgs --------------------------------------------------------------------- */
.grants-received {
  margin: 0; }

.timeframe,
.submitted {
  margin: 0;
  color: #999;
  font-size: 14px; }

/* Main Menu ---------------------------------------------------------------- */
#block-system-main-menu ul.menu li.leaf {
  padding-right: 23px; }
  #block-system-main-menu ul.menu li.leaf :last-child {
    padding-right: 0; }
